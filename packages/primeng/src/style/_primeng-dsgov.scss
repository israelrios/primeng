//
// Importa tudo que precisamos do dsgov e talvez até um pouco mais.
//

@use '@govbr-ds/core/src/core' as govbr;

// Personalizações para o primeng. Tudo que não foi possível definir com os design tokens disponíveis em src/preset

.p-placeholder {
    @extend .placeholder;

    margin: 0;
    padding-block: 0;
    line-height: 40px; // necessário para que o select tenha o mesmo tamanho do input
}

.p-inputNumber {
    padding-block: 0;
}

.p-select,
.p-multiselect {
    height: 40px;
    align-items: center;
    display: flex;
}

.ng-invalid.ng-dirty {
    &.p-inputtext,
    &.p-inputwrapper:not(:has(.p-inputtext)),
    &.p-inputwrapper > .p-inputtext {
        border-width: var(--surface-width-md);
    }

    // sobrescreve a cor da borda quando o componente tiver o foco para não mostrar a borda com cor diferente da sombra.
    &.p-component:enabled:focus:not(.p-disabled) {
        --p-inputtext-invalid-border-color: var(--p-form-field-focus-border-color);
        --p-textarea-invalid-border-color: var(--p-form-field-focus-border-color);
    }
    &.p-focus:not(.p-disabled) {
        --p-select-invalid-border-color: var(--p-form-field-focus-border-color);
        --p-multiselect-invalid-border-color: var(--p-form-field-focus-border-color);
        --p-autocomplete-invalid-border-color: var(--p-form-field-focus-border-color);
        --p-inputchips-invalid-border-color: var(--p-form-field-focus-border-color);
    }
    &:not(.p-disabled):has(:focus-visible){
        --p-checkbox-invalid-border-color: var(--p-form-field-focus-border-color);
        --p-radiobutton-invalid-border-color: var(--p-form-field-focus-border-color);
    }
}

.p-select-label,
.p-multiselect-label,
.p-inputtext {
    &:not(.p-placeholder) {
        padding-block: 0;
        font-size: var(--font-size-scale-up-01);
        line-height: 40px; // necessário para que o select tenha o mesmo tamanho do input
        height: 40px;
        font-weight: var(--font-weight-medium);
    }
}

.p-inputwrapper:not(.p-disabled):hover:not(:has(.p-select-dropdown:hover, .p-inputtext, .p-multiselect-dropdown:hover, .p-component:hover)),
.p-inputtext:enabled:hover {
    background: linear-gradient(rgba(var(--color-light-rgb), var(--hover)), rgba(var(--color-light-rgb), var(--hover-light)));
}

.p-select-dropdown,
.p-multiselect-dropdown {
    margin: calc(var(--spacing-scale-half) - 1px);
    height: var(--p-select-dropdown-width);
}

.p-select-open .p-select-dropdown,
.p-multiselect-open .p-multiselect-dropdown {
    transform: rotate(180deg);
}

.p-select:not(.p-disabled) {
    .p-select-dropdown:hover,
    .p-select-clear-icon:hover {
        background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover-light)), rgba(var(--interactive-rgb), var(--hover-light)));
        border-radius: var(--p-border-radius-button);
    }
}

.p-select-clear-icon {
    --padding: calc((var(--p-select-dropdown-width) - var(--p-icon-size)) / 2);
    padding: var(--padding);
    margin-right: calc(var(--spacing-scale-half) + 2px);
    //noinspection CssInvalidFunction
    transform: translateY(calc(var(--padding) * -1));
    box-sizing: content-box;
}

.p-select-list-container,
.p-multiselect-list-container {
    max-width: calc(100vw - 100px);
}

.p-multiselect:not(.p-disabled) {
    .p-multiselect-dropdown:hover,
    .p-multiselect-clear-icon:hover {
        background-image: linear-gradient(rgba(var(--interactive-rgb), var(--hover-light)), rgba(var(--interactive-rgb), var(--hover-light)));
        border-radius: var(--p-border-radius-button);
    }
}

.p-multiselect-clear-icon {
    --padding: calc((var(--p-multiselect-dropdown-width) - var(--p-icon-size)) / 2);
    --margin: calc(var(--spacing-scale-half) - 1px);
    padding: var(--padding);
    margin: var(--margin) 0 var(--margin) 0;
}

.p-tab {
    font-size: var(--font-size-scale-up-02);
    line-height: 1;
}

.p-datatable-thead > tr > th,
.p-datatable-tbody > tr > td {
    font-size: var(--font-size-scale-base);
}

.p-fieldset.p-component {
    border: 0;
}
